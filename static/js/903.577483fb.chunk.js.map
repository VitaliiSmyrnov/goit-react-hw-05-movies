{"version":3,"file":"static/js/903.577483fb.chunk.js","mappings":"8PAAaA,EAAgB,SAAAC,GAc3B,OAbmBA,EAAKC,MAAK,SAACC,EAAGC,GAC/B,OAAuB,OAAnBD,EAAEE,cAA4C,OAAnBD,EAAEC,aACxB,EAEc,OAAnBF,EAAEE,cAA4C,OAAnBD,EAAEC,aACxB,EAEc,OAAnBF,EAAEE,cAA4C,OAAnBD,EAAEC,cACvB,EAEH,CACR,GAGF,E,SCbYC,E,QAAUC,GAAAA,GAAH,8J,mBCoEpB,EA/Da,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACfC,EAAWF,EAAXE,OAiBR,OAfA,iBAAC,2FACCN,EAAU,WADX,mBAIsBO,EAAAA,EAAAA,IAAeC,OAAOd,GAAUY,GAJtD,OAISnB,EAJT,OAKGW,EAAQZ,EAAcC,IACtBa,EAAU,YANb,gDAQsB,kBAAf,KAAMS,OACRP,EAAS,KAAMQ,SACfV,EAAU,aAVf,wDAAD,GAeO,WACLI,EAAWO,OACZ,CACF,GAAE,CAACjB,IAEJkB,QAAQC,IAAIZ,IAEV,UAACT,EAAD,WACc,YAAXO,IAAwB,8CAD3B,OAGGF,QAHH,IAGGA,OAHH,EAGGA,EAAMiB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIxB,EAAoC,EAApCA,aAAckB,EAAsB,EAAtBA,KAAMO,EAAgB,EAAhBA,UAC9BC,EACa,OAAjB1B,EAAA,0CACuCA,GACnC2B,EAEN,OACE,2BACE,gBAAKC,IAAKF,EAAOG,IAAKX,KACtB,uBAAIA,KACJ,uCAAeO,OAHRD,EAMZ,IAEW,aAAXhB,GAAyC,IAAhBF,EAAKwB,SAC7B,iEAGU,aAAXtB,IACC,kGAMP,C,mMCjEDuB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,mCAIdC,SAAU,SAGL,IAAMC,EAAsB,mCAAG,WAAMnB,GAAN,uFACbgB,EAAAA,EAAAA,IAAU,sBAAuB,CAAEhB,OAAAA,IADtB,cAC9BoB,EAD8B,yBAG7BA,EAASvC,KAAKwC,SAHe,2CAAH,sDAMtBC,EAAgB,mCAAG,WAAOC,EAAGvB,GAAV,uFACPgB,EAAAA,EAAAA,IAAA,8BAAiCO,GAAK,CAAEvB,OAAAA,IADjC,cACxBoB,EADwB,yBAGvBA,EAASvC,KAAKwC,SAHS,2CAAH,wDAMhBG,EAAiB,mCAAG,WAAOf,EAAIT,GAAX,uFACRgB,EAAAA,EAAAA,IAAA,iBAAoBP,GAAM,CAAET,OAAAA,IADpB,cACzBoB,EADyB,yBAGxBA,EAASvC,MAHe,2CAAH,wDAMjBoB,EAAc,mCAAG,WAAOQ,EAAIT,GAAX,uFACLgB,EAAAA,EAAAA,IAAA,iBAAoBP,EAApB,YAAkC,CAAET,OAAAA,IAD/B,cACtBoB,EADsB,yBAGrBA,EAASvC,KAAKU,MAHO,2CAAH,wDAMdkC,EAAiB,mCAAG,WAAOhB,EAAIT,GAAX,uFACRgB,EAAAA,EAAAA,IAAA,iBAAoBP,EAApB,YAAkC,CAAET,OAAAA,IAD5B,cACzBoB,EADyB,yBAGxBA,EAASvC,KAAKwC,SAHU,2CAAH,uD","sources":["utils/getSortedCast.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/Api.js"],"sourcesContent":["export const getSortedCast = data => {\n  const sortedCast = data.sort((a, b) => {\n    if (a.profile_path !== null && b.profile_path !== null) {\n      return 0; // порядок не змінюється\n    }\n    if (a.profile_path === null && b.profile_path !== null) {\n      return 1; // a після b, бо b має profile_path\n    }\n    if (a.profile_path !== null && b.profile_path === null) {\n      return -1; // a перед b, бо a має profile_path\n    }\n    return 0; // порядок не змінюється, обидва мають profile_path = null\n  });\n\n  return sortedCast;\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.ul`\n  margin-top: 10px;\n\n  li {\n    margin-bottom: 25px;\n  }\n\n  img {\n    width: 150px;\n  }\n\n  p {\n    margin-top: 10px;\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCast } from 'services/Api';\nimport { getSortedCast } from 'utils/getSortedCast';\nimport { Wrapper } from './Cast.styled';\nimport NoPhoto from 'assets/no-photo.jpg';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    (async () => {\n      setStatus('pending');\n\n      try {\n        const data = await fetchMovieCast(Number(movieId), signal);\n        setCast(getSortedCast(data));\n        setStatus('resolved');\n      } catch (error) {\n        if (error.name !== 'CanceledError') {\n          setError(error.message);\n          setStatus('rejected');\n        }\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, [movieId]);\n\n  console.log(error);\n  return (\n    <Wrapper>\n      {status === 'pending' && <p>Loading subpage...</p>}\n\n      {cast?.map(({ id, profile_path, name, character }) => {\n        const photo =\n          profile_path !== null\n            ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n            : NoPhoto;\n\n        return (\n          <li key={id}>\n            <img src={photo} alt={name} />\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        );\n      })}\n\n      {status === 'resolved' && cast.length === 0 && (\n        <p>We don't have any cast for this movie</p>\n      )}\n\n      {status === 'rejected' && (\n        <p>\n          Oops, something went wrong. Please, reload the subpage to try again.\n        </p>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '5cbb87aef27f9b4333ebebc944ad48bd';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const fetchMovieTrendingList = async signal => {\n  const response = await axios.get('/trending/movie/day', { signal });\n\n  return response.data.results;\n};\n\nexport const fetchMovieSearch = async (q, signal) => {\n  const response = await axios.get(`/search/movie?query=${q}`, { signal });\n\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async (id, signal) => {\n  const response = await axios.get(`/movie/${id}`, { signal });\n\n  return response.data;\n};\n\nexport const fetchMovieCast = async (id, signal) => {\n  const response = await axios.get(`/movie/${id}/credits`, { signal });\n\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async (id, signal) => {\n  const response = await axios.get(`/movie/${id}/reviews`, { signal });\n\n  return response.data.results;\n};\n"],"names":["getSortedCast","data","sort","a","b","profile_path","Wrapper","styled","movieId","useParams","useState","cast","setCast","status","setStatus","error","setError","useEffect","controller","AbortController","signal","fetchMovieCast","Number","name","message","abort","console","log","map","id","character","photo","NoPhoto","src","alt","length","axios","api_key","language","fetchMovieTrendingList","response","results","fetchMovieSearch","q","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}