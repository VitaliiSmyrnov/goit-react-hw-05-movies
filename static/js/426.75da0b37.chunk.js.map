{"version":3,"file":"static/js/426.75da0b37.chunk.js","mappings":"8PA0DA,UAnDe,WAAO,IAAD,EACnB,GAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,QAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GA6B1C,OA3BAC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACA,IAAMG,EAAa,IAAIC,gBACfC,EAAWF,EAAXE,OAmBR,OAjBA,iBAAC,2FACCX,EAAU,WADX,mBAIsBY,EAAAA,EAAAA,IAAiBN,EAAOK,GAJ9C,OAISE,EAJT,OAKGf,EAAgBe,GAChBb,EAAU,YANb,gDAQsB,kBAAf,KAAMc,OACRZ,EACE,qEAEFF,EAAU,aAZf,wDAAD,GAiBO,WACLS,EAAWM,OACZ,CAvBiB,CAwBnB,GAAE,CAACT,KAGF,6BACE,SAAC,KAAD,CAAWU,SAAU,SAAAF,GAAI,OAAIT,EAAgB,CAAES,KAAAA,GAAtB,IAEb,YAAXf,IAAwB,SAAC,KAAD,IAEb,aAAXA,IAAyB,SAAC,KAAD,CAAWkB,MAAOpB,IAEhC,aAAXE,GAAiD,IAAxBF,EAAaqB,SACrC,SAAC,KAAD,CAASC,KAAK,gBAAgBC,MAAOC,IAG3B,aAAXtB,IAAyB,SAAC,KAAD,CAASoB,KAAMlB,EAAOmB,MAAOE,MAG5D,C,mMCrDDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAHc,mCAIdC,SAAU,SAGL,IAAMC,EAAsB,mCAAG,WAAMf,GAAN,uFACbY,EAAAA,EAAAA,IAAU,sBAAuB,CAAEZ,OAAAA,IADtB,cAC9BgB,EAD8B,yBAG7BA,EAASd,KAAKe,SAHe,2CAAH,sDAMtBhB,EAAgB,mCAAG,WAAOiB,EAAGlB,GAAV,uFACPY,EAAAA,EAAAA,IAAA,8BAAiCM,GAAK,CAAElB,OAAAA,IADjC,cACxBgB,EADwB,yBAGvBA,EAASd,KAAKe,SAHS,2CAAH,wDAMhBE,EAAiB,mCAAG,WAAOC,EAAIpB,GAAX,uFACRY,EAAAA,EAAAA,IAAA,iBAAoBQ,GAAM,CAAEpB,OAAAA,IADpB,cACzBgB,EADyB,yBAGxBA,EAASd,MAHe,2CAAH,wDAMjBmB,EAAc,mCAAG,WAAOD,EAAIpB,GAAX,uFACLY,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,YAAkC,CAAEpB,OAAAA,IAD/B,cACtBgB,EADsB,yBAGrBA,EAASd,KAAKoB,MAHO,2CAAH,wDAMdC,EAAiB,mCAAG,WAAOH,EAAIpB,GAAX,uFACRY,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,YAAkC,CAAEpB,OAAAA,IAD5B,cACzBgB,EADyB,yBAGxBA,EAASd,KAAKe,SAHU,2CAAH,uD","sources":["page/Movies/Movies.jsx","services/Api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMovieSearch } from 'services/Api';\nimport { SearchBox, MovieList, Loader, Message } from 'components';\nimport MovieApiError from 'assets/something-wrong-min.png';\nimport WrongQuery from 'assets/empty-collection-min.png';\n\nconst Movies = () => {\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('name') ?? '';\n\n  useEffect(() => {\n    if (!query) return;\n    const controller = new AbortController();\n    const { signal } = controller;\n\n    (async () => {\n      setStatus('pending');\n\n      try {\n        const data = await fetchMovieSearch(query, signal);\n        setSearchMovies(data);\n        setStatus('resolved');\n      } catch (error) {\n        if (error.name !== 'CanceledError') {\n          setError(\n            'Oops, something went wrong. Please, reload the page to try again.'\n          );\n          setStatus('rejected');\n        }\n      }\n    })();\n\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  return (\n    <main>\n      <SearchBox onSubmit={name => setSearchParams({ name })} />\n\n      {status === 'pending' && <Loader />}\n\n      {status === 'resolved' && <MovieList items={searchMovies} />}\n\n      {status === 'resolved' && searchMovies.length === 0 && (\n        <Message text=\"Nothing found\" image={WrongQuery} />\n      )}\n\n      {status === 'rejected' && <Message text={error} image={MovieApiError} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = '5cbb87aef27f9b4333ebebc944ad48bd';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const fetchMovieTrendingList = async signal => {\n  const response = await axios.get('/trending/movie/day', { signal });\n\n  return response.data.results;\n};\n\nexport const fetchMovieSearch = async (q, signal) => {\n  const response = await axios.get(`/search/movie?query=${q}`, { signal });\n\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async (id, signal) => {\n  const response = await axios.get(`/movie/${id}`, { signal });\n\n  return response.data;\n};\n\nexport const fetchMovieCast = async (id, signal) => {\n  const response = await axios.get(`/movie/${id}/credits`, { signal });\n\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async (id, signal) => {\n  const response = await axios.get(`/movie/${id}/reviews`, { signal });\n\n  return response.data.results;\n};\n"],"names":["useState","searchMovies","setSearchMovies","status","setStatus","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","controller","AbortController","signal","fetchMovieSearch","data","name","abort","onSubmit","items","length","text","image","WrongQuery","MovieApiError","axios","api_key","language","fetchMovieTrendingList","response","results","q","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}